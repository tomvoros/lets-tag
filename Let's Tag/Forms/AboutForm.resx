<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        i4uLi0thMfsPD/2k5+ZU7ugAAAAASUVORK5CYII=
</value>
  </data>
</root>